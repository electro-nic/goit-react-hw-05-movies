{"version":3,"file":"static/js/339.b51f05ff.chunk.js","mappings":"4TACMA,EAAW,gCACXC,EAAW,mCAEXC,EAAY,mCAAG,WAAOC,GAAP,uFACMC,IAAAA,IAAA,UAAaJ,EAAb,oCAAiDC,EAAjD,iBAAkEE,IADxE,cACXE,EADW,yBAEVA,EAASC,MAFC,2CAAH,sDAKZC,EAAa,mCAAG,WAAOC,GAAP,uFACKJ,IAAAA,IAAA,UAAaJ,EAAb,iBAA8BQ,EAA9B,oBAA4CP,EAA5C,oBADL,cACZI,EADY,yBAEXA,EAASC,MAFE,2CAAH,sDAMbG,EAAgB,mCAAG,WAAOC,EAAYC,GAAnB,uFACEP,IAAAA,IAAA,UAAaJ,EAAb,gCAA6CC,EAA7C,4DAAyGS,EAAzG,iBAA4HC,IAD9H,cACfN,EADe,yBAEdA,EAASC,MAFK,2CAAH,wDAKhBM,EAAgB,mCAAG,WAAOJ,GAAP,uFACEJ,IAAAA,IAAA,UAAaJ,EAAb,iBAA8BQ,EAA9B,4BAAoDP,EAApD,oBADF,cACfI,EADe,yBAEdA,EAASC,MAFK,2CAAH,sDAKhBO,EAAY,mCAAG,WAAOL,GAAP,uFACMJ,IAAAA,IAAA,UAAaJ,EAAb,iBAA8BQ,EAA9B,4BAAoDP,EAApD,2BADN,cACXI,EADW,yBAEVA,EAASC,MAFC,2CAAH,qD,qJCvBH,SAASQ,EAAT,GAAuC,IAC3CC,EAD0C,EAAfC,YACJC,KAAI,gBAAGT,EAAH,EAAGA,GAAIU,EAAP,EAAOA,QAAP,OAC9B,wBACKA,GADIV,EADqB,IAKlC,OACI,0BACI,wBACKO,KAIhB,C,cCTc,SAASI,IACpB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEOlB,GAAOmB,EAAAA,EAAAA,MAAPnB,IAEPoB,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAe,mCAAG,2FACpBL,GAAW,GADS,mBAGMX,EAAAA,EAAAA,IAAaL,GAHnB,OAGVsB,EAHU,OAIhBR,EAASQ,EAAQC,SAJD,gDAMhBL,EAAS,EAAD,IANQ,yBAQhBF,GAAW,GARK,4EAAH,qDAWrBK,GACH,GAAE,CAACrB,IAEJ,IAAMwB,EAAUC,QAAQZ,EAAMa,QAE9B,OACI,4BACI,yCACCX,GAAU,SAAC,KAAD,CACSY,OAAO,KACPC,MAAM,KACNC,OAAO,KACPC,MAAM,UACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,KACJ,iBACxBV,GAAU,SAAClB,EAAD,CAAaE,YAAaK,KAAY,kEAChDI,IAAS,sEAGrB,C","sources":["components/fetch.jsx","components/pages/SingleMoviePage/Reviews/ReviewsList.jsx","components/pages/SingleMoviePage/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst myAPIkey = 'd53b112a09092033b6a356e57b991833';\n\nconst fetchRequest = async (page) => {\n    const response = await axios.get(`${BASE_URL}trending/all/day?api_key=${myAPIkey}&page=${page}`);\n    return response.data;\n}\n\nconst fetchOneMovie = async (id) => {\n    const response = await axios.get(`${BASE_URL}movie/${id}?api_key=${myAPIkey}&language=en-US`);\n    return response.data;\n\n}\n\nconst fetchMovieByName = async (searchName, currentPage) => {\n    const response = await axios.get(`${BASE_URL}search/movie?api_key=${myAPIkey}&language=en-US&page=1&include_adult=false&query=${searchName}&page=${currentPage}`);\n    return response.data;\n}\n\nconst fetchActorsMovie = async (id) => {\n    const response = await axios.get(`${BASE_URL}movie/${id}/credits?api_key=${myAPIkey}&language=en-US`);\n    return response.data;\n}\n\nconst fetchReviews = async (id) => {\n    const response = await axios.get(`${BASE_URL}movie/${id}/reviews?api_key=${myAPIkey}&language=en-US&page=1`);\n    return response.data;\n}\n\nexport { fetchRequest, fetchOneMovie, fetchMovieByName, fetchActorsMovie, fetchReviews };\n\n","import PropTypes from 'prop-types';\n\nexport default function RewiewsList({ reviewsList }) {\n     const elements = reviewsList.map(({ id, content }) => (\n        <li key={id}>\n            {content}\n        </li>\n    ));\n    return (\n        <div>\n            <ul>\n                {elements}\n            </ul>\n        </div>\n    )\n}\n\nRewiewsList.propTypes = {\n    reviewsList: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string,\n            content: PropTypes.string,\n        })\n    )\n}","import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { fetchReviews } from \"components/fetch\";\nimport RewiewsList from \"./ReviewsList\";\nimport { ThreeDots } from 'react-loader-spinner';\n\nexport default function Reviews() {\n    const [state, setState] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    const {id } = useParams();\n\n    useEffect(() => {\n        const fetchInfReviews = async () => {\n            setLoading(true);\n            try {\n                const reviews = await fetchReviews(id);\n                setState(reviews.results);\n            } catch(error) {\n                setError(error);\n            } finally {\n                setLoading(false);\n            }\n        } \n        fetchInfReviews();\n    }, [id]);\n\n    const isState = Boolean(state.length);\n\n    return (\n        <div>\n            <h2>Reviews list</h2>\n            {loading ? <ThreeDots \n                                height=\"90\" \n                                width=\"90\" \n                                radius=\"10\"\n                                color=\"#674aaa\" \n                                ariaLabel=\"three-dots-loading\"\n                                wrapperStyle={{}}\n                                wrapperClassName=\"\"\n                                visible={true}\n                                /> : <p></p>}\n            {isState ? <RewiewsList reviewsList={state} /> : <p>Any reviews. Your review can be first.</p> }\n            {error && <p>Something went wrong. Try later, please.</p>}\n        </div>\n    )\n}\n\n"],"names":["BASE_URL","myAPIkey","fetchRequest","page","axios","response","data","fetchOneMovie","id","fetchMovieByName","searchName","currentPage","fetchActorsMovie","fetchReviews","RewiewsList","elements","reviewsList","map","content","Reviews","useState","state","setState","loading","setLoading","error","setError","useParams","useEffect","fetchInfReviews","reviews","results","isState","Boolean","length","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible"],"sourceRoot":""}